<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WMS Product Volume Forecasting Widget</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
        .widget-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            border-bottom: 1px solid #e5e7eb;
        }
        .widget-title {
            font-size: 1.125rem;
            font-weight: 600;
            color: #1f2937;
        }
        .widget-content {
            padding: 1rem;
        }
        select {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' class='h-5 w-5' viewBox='0 0 20 20' fill='currentColor'%3E%3Cpath fill-rule='evenodd' d='M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 M0 01-1.414 0l-4-4a1 1 0 010-1.414z' clip-rule='evenodd' /%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 0.5rem center;
            background-size: 1.5em 1.5em;
            padding-right: 2.5rem;
        }
    </style>
</head>
<body class="text-gray-800 p-4 md:p-8">

    <!-- Main Widget Container -->
    <main class="max-w-4xl mx-auto">
        <div class="bg-white rounded-lg shadow-md overflow-hidden">
            <div class="widget-header">
                <h2 class="widget-title">WMS Product Volume Forecasting</h2>
                <div class="flex items-center space-x-2">
                     <svg id="resetButton" class="w-5 h-5 text-gray-500 cursor-pointer hover:text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 11a8.1 8.1 0 00-15.5-2m-.5-4v4h4"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 13a8.1 8.1 0 0015.5 2m.5 4v-4h-4"></path>
                     </svg>
                     <svg class="w-5 h-5 text-gray-500 cursor-pointer hover:text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"></path></svg>
                </div>
            </div>
            <div class="widget-content">
                <!-- Filters -->
                <div class="p-4 bg-gray-50 rounded-md grid grid-cols-2 md:grid-cols-5 gap-4">
                    <div>
                        <label class="block text-xs font-medium text-gray-600">Facility</label>
                        <select id="facility" class="mt-1 block w-full text-sm border-gray-300 rounded-md"></select>
                    </div>
                    <div>
                        <label class="block text-xs font-medium text-gray-600">Owner</label>
                        <select id="owner" class="mt-1 block w-full text-sm border-gray-300 rounded-md"></select>
                    </div>
                    <div>
                        <label class="block text-xs font-medium text-gray-600">Item (Owner)</label>
                        <select id="item" class="mt-1 block w-full text-sm border-gray-300 rounded-md"></select>
                    </div>
                    <div>
                        <label class="block text-xs font-medium text-gray-600">Item Group</label>
                        <select id="itemGroup" class="mt-1 block w-full text-sm border-gray-300 rounded-md"></select>
                    </div>
                     <div>
                        <label class="block text-xs font-medium text-gray-600">View Type</label>
                        <select id="viewType" class="mt-1 block w-full text-sm border-gray-300 rounded-md">
                            <option>Item</option>
                            <option>Group</option>
                        </select>
                    </div>
                </div>
                
                <!-- Table -->
                <table class="w-full mt-4 text-left text-sm">
                     <thead id="forecast-table-head">
                        <!-- Header populated by JS -->
                    </thead>
                    <tbody id="forecast-table-body">
                         <!-- Data populated by JS -->
                    </tbody>
                </table>

                <!-- Chart -->
                <div class="mt-8">
                     <h3 id="chart-title" class="text-md font-semibold text-gray-700 mb-4">Monthly Volume Forecast</h3>
                     <div id="chart-container" class="w-full h-64 p-4 border rounded-md flex justify-around items-end space-x-2 md:space-x-4">
                         <!-- Chart bars populated by JS -->
                     </div>
                     <div class="flex justify-center items-center space-x-4 mt-4 text-sm">
                         <div class="flex items-center"><div class="w-3 h-3 bg-blue-600 rounded-sm mr-2"></div>Shipped Qty</div>
                         <div class="flex items-center"><div class="w-3 h-3 bg-cyan-400 rounded-sm mr-2"></div>Est. Qty</div>
                     </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        const allForecastData = [
            // DETROIT
            { facility: 'DETROIT', owner: '7700', item: 'X2040112 (7700)', itemGroup: 'KEYBOARDS', desc: 'Gaming Keyboard', lastShip: 345, currShip: 151, currEst: 383, delta: 39, monthlyData: [{ m: '2023-04', s: 4000, e: 0 }, { m: '2023-05', s: 2000, e: 0 }, { m: '2023-06', s: 3000, e: 0 }, { m: '2023-07*', s: 3500, e: 1000 }, { m: '2023-08', s: 0, e: 3000 }, { m: '2023-09', s: 0, e: 2500 }] },
            { facility: 'DETROIT', owner: '7700', item: '12322992 (7700)', itemGroup: 'CASES', desc: 'Computer Case Style', lastShip: 264, currShip: 116, currEst: 288, delta: 24, monthlyData: [{ m: '2023-04', s: 3000, e: 0 }, { m: '2023-05', s: 1500, e: 0 }, { m: '2023-06', s: 2500, e: 0 }, { m: '2023-07*', s: 2800, e: 800 }, { m: '2023-08', s: 0, e: 2500 }, { m: '2023-09', s: 0, e: 2000 }] },
            { facility: 'DETROIT', owner: '7700', item: '76800880 (7700)', itemGroup: 'WEBCAMS', desc: 'Webcam - With Micrc', lastShip: 227, currShip: 102, currEst: 244, delta: 17, monthlyData: [{ m: '2023-04', s: 3312, e: 0 }, { m: '2023-05', s: 1441, e: 0 }, { m: '2023-06', s: 1518, e: 0 }, { m: '2023-07*', s: 1937, e: 675 }, { m: '2023-08', s: 0, e: 1604 }, { m: '2023-09', s: 0, e: 1261 }] },
            { facility: 'DETROIT', owner: '8800', item: 'DT-MOUSE-01 (8800)', itemGroup: 'MICE', desc: 'Ergonomic Mouse', lastShip: 150, currShip: 70, currEst: 160, delta: 10, monthlyData: [{ m: '2023-04', s: 2000, e: 0 }, { m: '2023-05', s: 1000, e: 0 }, { m: '2023-06', s: 1500, e: 0 }, { m: '2023-07*', s: 1500, e: 500 }, { m: '2023-08', s: 0, e: 1000 }, { m: '2023-09', s: 0, e: 1000 }] },
            // CHICAGO
            { facility: 'CHICAGO', owner: '5510', item: 'CHG-5893 (5510)', itemGroup: 'MICE', desc: 'Wireless Mouse', lastShip: 412, currShip: 210, currEst: 450, delta: 40, monthlyData: [{ m: '2023-04', s: 5000, e: 0 }, { m: '2023-05', s: 3000, e: 0 }, { m: '2023-06', s: 4000, e: 0 }, { m: '2023-07*', s: 4000, e: 1500 }, { m: '2023-08', s: 0, e: 4200 }, { m: '2023-09', s: 0, e: 3500 }] },
            { facility: 'CHICAGO', owner: '5510', item: 'CHG-9845 (5510)', itemGroup: 'STANDS', desc: 'Monitor Stand', lastShip: 150, currShip: 80, currEst: 170, delta: 20, monthlyData: [{ m: '2023-04', s: 2500, e: 0 }, { m: '2023-05', s: 1200, e: 0 }, { m: '2023-06', s: 2100, e: 0 }, { m: '2023-07*', s: 1800, e: 1000 }, { m: '2023-08', s: 0, e: 2000 }, { m: '2023-09', s: 0, e: 1500 }] },
            { facility: 'CHICAGO', owner: '6620', item: 'CHI-CBL-USB (6620)', itemGroup: 'CABLES', desc: 'USB-C Cable 3ft', lastShip: 800, currShip: 350, currEst: 820, delta: 20, monthlyData: [{ m: '2023-04', s: 3000, e: 0 }, { m: '2023-05', s: 3000, e: 0 }, { m: '2023-06', s: 3000, e: 0 }, { m: '2023-07*', s: 3000, e: 1000 }, { m: '2023-08', s: 0, e: 3000 }, { m: '2023-09', s: 0, e: 2500 }] },
            // JAKARTA
            { facility: 'JAKARTA', owner: 'JKT', item: 'JKT-ID-01 (JKT)', itemGroup: 'POWER', desc: 'Power Bank 10000mAh', lastShip: 850, currShip: 420, currEst: 900, delta: 50, monthlyData: [{ m: '2023-04', s: 8000, e: 0 }, { m: '2023-05', s: 4000, e: 0 }, { m: '2023-06', s: 5000, e: 0 }, { m: '2023-07*', s: 6000, e: 2000 }, { m: '2023-08', s: 0, e: 7000 }, { m: '2023-09', s: 0, e: 5000 }] },
            { facility: 'JAKARTA', owner: 'JKT', item: 'JKT-ID-02 (JKT)', itemGroup: 'AUDIO', desc: 'Bluetooth Speaker', lastShip: 600, currShip: 280, currEst: 650, delta: 50, monthlyData: [{ m: '2023-04', s: 4000, e: 0 }, { m: '2023-05', s: 3000, e: 0 }, { m: '2023-06', s: 3500, e: 0 }, { m: '2023-07*', s: 3500, e: 1000 }, { m: '2023-08', s: 0, e: 3500 }, { m: '2023-09', s: 0, e: 3000 }] },
            { facility: 'JAKARTA', owner: 'IDN', item: 'IDN-HS-05 (IDN)', itemGroup: 'AUDIO', desc: 'Noise Cancelling Headphones', lastShip: 400, currShip: 180, currEst: 410, delta: 10, monthlyData: [{ m: '2023-04', s: 3000, e: 0 }, { m: '2023-05', s: 2000, e: 0 }, { m: '2023-06', s: 2500, e: 0 }, { m: '2023-07*', s: 2500, e: 1000 }, { m: '2023-08', s: 0, e: 2500 }, { m: '2023-09', s: 0, e: 2000 }] }
        ];

        const facilitySelect = document.getElementById('facility');
        const ownerSelect = document.getElementById('owner');
        const itemSelect = document.getElementById('item');
        const itemGroupSelect = document.getElementById('itemGroup');
        const viewTypeSelect = document.getElementById('viewType');
        const tableHead = document.getElementById('forecast-table-head');
        const tableBody = document.getElementById('forecast-table-body');
        const chartContainer = document.getElementById('chart-container');
        const chartTitle = document.getElementById('chart-title');

        function populateSelect(selectElement, items, defaultOption) {
            selectElement.innerHTML = `<option>${defaultOption}</option>`;
            [...new Set(items)].sort().forEach(item => {
                const option = document.createElement('option');
                option.textContent = item;
                selectElement.appendChild(option);
            });
        }

        function updateDependentFilters(selectedFacility) {
            const facilityData = allForecastData.filter(d => d.facility === selectedFacility);
            populateSelect(ownerSelect, facilityData.map(d => d.owner), 'All');
            populateSelect(itemSelect, facilityData.map(d => d.item), 'All');
            populateSelect(itemGroupSelect, facilityData.map(d => d.itemGroup), 'All');
        }

        function generateChartData(data) {
            const monthlyAggregates = {};
            const monthsOrder = ['2023-04', '2023-05', '2023-06', '2023-07*', '2023-08', '2023-09'];
            monthsOrder.forEach(month => {
                monthlyAggregates[month] = { month: month, shipped: 0, estimated: 0 };
            });

            data.forEach(item => {
                item.monthlyData.forEach(monthData => {
                    if (monthlyAggregates[monthData.m]) {
                        monthlyAggregates[monthData.m].shipped += monthData.s;
                        monthlyAggregates[monthData.m].estimated += monthData.e;
                    }
                });
            });
            return Object.values(monthlyAggregates);
        }
        
        function updateWidget() {
            const selectedFacility = facilitySelect.value;
            const selectedOwner = ownerSelect.value;
            const selectedItem = itemSelect.value;
            const selectedGroup = itemGroupSelect.value;
            const selectedView = viewTypeSelect.value;

            // Filter data based on selections
            let baseFilteredData = allForecastData.filter(d => d.facility === selectedFacility);
            if (selectedOwner !== 'All') baseFilteredData = baseFilteredData.filter(d => d.owner === selectedOwner);
            if (selectedItem !== 'All') baseFilteredData = baseFilteredData.filter(d => d.item === selectedItem);
            if (selectedGroup !== 'All') baseFilteredData = baseFilteredData.filter(d => d.itemGroup === selectedGroup);
            
            tableBody.innerHTML = '';

            if (selectedView === 'Group') {
                tableHead.innerHTML = `<tr class="border-b bg-gray-50"><th class="p-2 font-medium">Item Group</th><th class="p-2 font-medium text-right">Last Month Ship Qty</th><th class="p-2 font-medium text-right">Curr Month Ship Qty</th><th class="p-2 font-medium text-right">Curr Month Est Qty</th><th class="p-2 font-medium text-right">Qty Delta</th></tr>`;
                const groupedData = baseFilteredData.reduce((acc, current) => {
                    const group = current.itemGroup;
                    if (!acc[group]) {
                        acc[group] = { itemGroup: group, lastShip: 0, currShip: 0, currEst: 0, delta: 0 };
                    }
                    acc[group].lastShip += current.lastShip;
                    acc[group].currShip += current.currShip;
                    acc[group].currEst += current.currEst;
                    acc[group].delta += current.delta;
                    return acc;
                }, {});
                const tableData = Object.values(groupedData);
                if (tableData.length === 0) {
                    tableBody.innerHTML = `<tr><td colspan="5" class="p-2 text-center text-gray-500">No data available for the selected filters.</td></tr>`;
                } else {
                    tableData.forEach(item => {
                        const row = document.createElement('tr');
                        row.className = 'border-b';
                        row.innerHTML = `<td class="p-2">${item.itemGroup}</td><td class="p-2 text-right">${item.lastShip}</td><td class="p-2 text-right">${item.currShip}</td><td class="p-2 text-right">${item.currEst}</td><td class="p-2 text-right text-green-600 font-medium">${item.delta}</td>`;
                        tableBody.appendChild(row);
                    });
                }
            } else { // 'Item' view
                 tableHead.innerHTML = `<tr class="border-b bg-gray-50"><th class="p-2 font-medium">Item (Owner)</th><th class="p-2 font-medium">Item Description</th><th class="p-2 font-medium text-right">Last Month Ship Qty</th><th class="p-2 font-medium text-right">Curr Month Ship Qty</th><th class="p-2 font-medium text-right">Curr Month Est Qty</th><th class="p-2 font-medium text-right">Qty Delta</th></tr>`;
                if (baseFilteredData.length === 0) {
                    tableBody.innerHTML = `<tr><td colspan="6" class="p-2 text-center text-gray-500">No data available for the selected filters.</td></tr>`;
                } else {
                    baseFilteredData.forEach(item => {
                        const row = document.createElement('tr');
                        row.className = 'border-b';
                        row.innerHTML = `<td class="p-2">${item.item}</td><td class="p-2">${item.desc}</td><td class="p-2 text-right">${item.lastShip}</td><td class="p-2 text-right">${item.currShip}</td><td class="p-2 text-right">${item.currEst}</td><td class="p-2 text-right text-green-600 font-medium">${item.delta}</td>`;
                        tableBody.appendChild(row);
                    });
                }
            }

            // Update Chart with filtered data
            const chartData = generateChartData(baseFilteredData);
            chartContainer.innerHTML = '';
            const maxVal = Math.max(1, ...chartData.flatMap(d => [d.shipped, d.estimated])); // Use 1 as minimum to avoid division by zero
            chartData.forEach(d => {
                const shippedHeight = (d.shipped / maxVal) * 100;
                const estimatedHeight = (d.estimated / maxVal) * 100;
                const barGroup = document.createElement('div');
                barGroup.className = 'flex flex-col items-center h-full justify-end w-full';
                barGroup.innerHTML = `
                    <div class="flex items-end h-full w-full justify-center space-x-1">
                        ${shippedHeight > 0 ? `<div class="bg-blue-600 rounded-t-sm" style="height: ${shippedHeight}%; width: 50%;"></div>` : '<div style="width: 50%;"></div>'}
                        ${estimatedHeight > 0 ? `<div class="bg-cyan-400 rounded-t-sm" style="height: ${estimatedHeight}%; width: 50%;"></div>` : '<div style="width: 50%;"></div>'}
                    </div>
                    <div class="text-xs text-gray-500 mt-1">${d.month}</div>
                `;
                chartContainer.appendChild(barGroup);
            });
        }
        
        // --- Event Listeners ---
        [facilitySelect, ownerSelect, itemSelect, itemGroupSelect, viewTypeSelect].forEach(sel => {
            sel.addEventListener('change', updateWidget);
        });

        facilitySelect.addEventListener('change', (e) => {
             updateDependentFilters(e.target.value);
             // updateWidget is already called by the generic listener above
        });

        // --- Initial Load ---
        document.addEventListener('DOMContentLoaded', () => {
            const resetButton = document.getElementById('resetButton');
            
            // Populate facility dropdown without a placeholder
            const facilities = [...new Set(allForecastData.map(d => d.facility))].sort();
            facilitySelect.innerHTML = '';
            facilities.forEach(item => {
                const option = document.createElement('option');
                option.textContent = item;
                facilitySelect.appendChild(option);
            });

            function resetToInitialState() {
                facilitySelect.value = facilities[0] || 'DETROIT';
                updateDependentFilters(facilitySelect.value);
                // The dropdowns are repopulated by updateDependentFilters,
                // but we also need to ensure "viewType" is reset.
                viewTypeSelect.value = 'Item';
                updateWidget();
            }

            resetButton.addEventListener('click', resetToInitialState);

            resetToInitialState(); // Run on initial load
        });
    </script>
</body>
</html>

